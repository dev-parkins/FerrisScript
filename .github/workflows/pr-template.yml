name: Auto Apply PR Template

on:
  pull_request:
    types: [opened]
    branches:
      - '**'

jobs:
  apply-template:
    name: Apply PR Template Based on Branch
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Select template based on branch name
        id: template
        env:
          # Security: Pass user-controlled data via environment variable to prevent injection
          HEAD_REF: ${{ github.head_ref }}
        run: |
          TEMPLATE=""

          echo "üîç Analyzing branch: $HEAD_REF"

          if [[ "$HEAD_REF" == bugfix/* ]] || [[ "$HEAD_REF" == fix/* ]]; then
            TEMPLATE=".github/PULL_REQUEST_TEMPLATE/bug_fix.md"
            echo "üêõ Detected bug fix branch"
          elif [[ "$HEAD_REF" == feature/* ]] || [[ "$HEAD_REF" == feat/* ]]; then
            TEMPLATE=".github/PULL_REQUEST_TEMPLATE/feature.md"
            echo "‚ú® Detected feature branch"
          elif [[ "$HEAD_REF" == docs/* ]] || [[ "$HEAD_REF" == doc/* ]]; then
            TEMPLATE=".github/PULL_REQUEST_TEMPLATE/docs.md"
            echo "üìù Detected documentation branch"
          else
            TEMPLATE=".github/PULL_REQUEST_TEMPLATE/docs.md"
            echo "‚ÑπÔ∏è No pattern match, defaulting to docs template"
          fi

          # Verify template file exists
          if [ ! -f "$TEMPLATE" ]; then
            echo "‚ùå Template file not found: $TEMPLATE"
            exit 1
          fi

          echo "‚úÖ Selected template: $TEMPLATE"
          echo "path=$TEMPLATE" >> $GITHUB_OUTPUT

      - name: Apply template to PR body
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const templatePath = '${{ steps.template.outputs.path }}';
            
            // Get current PR body
            const currentBody = context.payload.pull_request.body || '';
            
            // Check if PR body already has substantial content (>50 chars of non-whitespace)
            const contentLength = currentBody.trim().length;
            if (contentLength > 50) {
              console.log(`‚ÑπÔ∏è PR body already has content (${contentLength} chars), skipping template application`);
              console.log('This likely means the PR was created with a template already applied.');
              return;
            }
            
            // Read template file
            let templateBody;
            try {
              templateBody = fs.readFileSync(templatePath, 'utf8');
              console.log(`‚úÖ Read template file: ${templatePath}`);
            } catch (error) {
              console.error(`‚ùå Failed to read template file: ${error.message}`);
              throw error;
            }
            
            // Apply template to PR
            try {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: templateBody
              });
              
              console.log('‚úÖ Successfully applied PR template');
              console.log(`üìã Template: ${templatePath}`);
              
              // Add a comment to let user know template was applied
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: `ü§ñ **Automated PR Template Applied**\n\nBased on your branch name, I've applied the appropriate PR template. Please fill in all sections marked with \`<!-- ... -->\` comments.\n\nüìã Template used: \`${templatePath.split('/').pop()}\``
              });
              
            } catch (error) {
              console.error(`‚ùå Failed to apply template: ${error.message}`);
              throw error;
            }
