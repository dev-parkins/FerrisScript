// TEST: node_query_validation
// CATEGORY: unit
// DESCRIPTION: Node query validation with has_node() for safe access
// EXPECT: success
// ASSERT: Player node exists and was accessed
// ASSERT_OPTIONAL: DebugUI node exists (optional)
// ASSERT_OPTIONAL: Enemies/Boss node exists
// ASSERT: Validation Complete
//
// Example: Node Query Validation
// Demonstrates has_node() for safe node access
//
// GODOT SCENE SETUP:
// 1. Create a new 2D Scene
// 2. Add FerrisScriptNode as root, rename to "Main"
// 3. Attach this script to Main node
// 4. Add child nodes to Main:
//    - Node2D named "Player" (required)
//    - Node2D named "DebugUI" (optional - can be omitted to test)
//    - Node2D named "Enemies" with child "Boss" (optional)
//
// Scene Tree Structure:
// /root
//   └─ Main (FerrisScriptNode with this script)
//        ├─ Player
//        ├─ DebugUI (optional)
//        └─ Enemies
//             └─ Boss (optional)
//
// EXPECTED BEHAVIOR:
// - Script loads successfully
// - has_node() returns true for existing nodes, false for missing
// - No errors when optional nodes are missing
// - Safe to run with or without optional nodes

fn _ready() {
    print("=== Node Query Validation ===");
    
    // Check if node exists before accessing
    if has_node("Player") {
        let player = get_node("Player");
        print("✓ Player node exists and was accessed");
    } else {
        print("✗ Player node not found");
    }
    
    // Validate optional UI elements
    if has_node("DebugUI") {
        let debug_ui = get_node("DebugUI");
        print("✓ DebugUI node exists (optional)");
    } else {
        print("○ DebugUI node not found (optional - OK)");
    }
    
    // Check nested node
    if has_node("Enemies/Boss") {
        let boss = get_node("Enemies/Boss");
        print("✓ Enemies/Boss node exists");
    } else {
        print("○ Enemies/Boss not found (optional - OK)");
    }
    
    print("=== Validation Complete ===");
}

fn _process(delta: f32) {
    // Check for dynamically spawned nodes
    if has_node("Enemies/Boss") {
        let boss = get_node("Enemies/Boss");
        // Boss is active, run boss logic
    }
    
    // Validate before parent access
    let parent = get_parent();
    if has_node("PowerUp") {
        let powerup = get_node("PowerUp");
        print("✓ PowerUp node validated and accessed");
    }
}

fn spawn_enemy() {
    // Check if spawn point exists
    if has_node("SpawnPoints/Point1") {
        let spawn = get_node("SpawnPoints/Point1");
        // Spawn enemy at this location
    }
}
